group 'fr.dcram'
version '1.0-SNAPSHOT'

apply plugin: 'java'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

sourceSets {
    train {
        java {
            srcDir 'src/train/java'
        }
        resources {
            srcDir 'src/train/resources'
        }
        compileClasspath += sourceSets.main.runtimeClasspath
    }
    test {
        compileClasspath += sourceSets.train.runtimeClasspath
        runtimeClasspath += sourceSets.train.runtimeClasspath
    }
}
dependencies {
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-annotations
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.9.2'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.2'
// https://mvnrepository.com/artifact/net.sf.trove4j/trove4j
    compile group: 'net.sf.trove4j', name: 'trove4j', version: '3.0.3'

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'
    testCompile group: 'org.assertj', name: 'assertj-core', version: '3.8.0'


    trainCompile "org.apache.uima:uimafit-core:2.3.0"
    trainCompile 'fr.univ-nantes.julestar:uima-tokenizer:1.4'
    trainCompile 'fr.univ-nantes.julestar:uima-tree-tagger-wrapper:1.3'
    trainCompile "org.apache.uima:uimaj-tools:2.8.1"
    trainCompile  "ch.qos.logback:logback-classic:1.1.7"
    trainCompile group: 'com.google.guava', name: 'guava', version: '23.5-jre'
}


// gradle -Plang=fr -PsrcFile=/path/to/src -PsrcFile=/path/to/target getTags
task getTags(type: JavaExec) {
    classpath += sourceSets.main.runtimeClasspath
    classpath += sourceSets.train.runtimeClasspath
    args = [
            project.hasProperty("lang") ? project.getProperty("lang") : "",
            project.hasProperty("srcFile") ? project.getProperty("srcFile") : "",
            project.hasProperty("targetFile") ? project.getProperty("targetFile") : ""]
    main = 'fr.dcram.treetaggerj.trainer.TreeTaggerTagGetter'
}

// gradle -PtrainingCorpus=/path/to/file -PoutputModel=/path/to/file train
task train(type: JavaExec) {
    classpath += sourceSets.main.runtimeClasspath
    classpath += sourceSets.train.runtimeClasspath
    args = [
            project.hasProperty("trainingCorpus") ? project.getProperty("trainingCorpus") : "",
            project.hasProperty("outputModel") ? project.getProperty("outputModel") : ""]
    main = 'fr.dcram.treetaggerj.trainer.Trainer'
}


task jcasgen(type: JavaExec) {
    description = 'Generate UIMA TS classes'
    ext.srcFile = file("$projectDir/src/train/resources/trainer-type-system.xml")
    ext.outputDir = file("$projectDir/src/train/java")
    inputs.file srcFile
    outputs.dir outputDir
    classpath configurations.trainCompile
    // This ensures availability of type system imports
    // however, assumes that files are in desc subfolder
    systemProperty 'uima.datapath', "$projectDir/desc"
    main = 'org.apache.uima.tools.jcasgen.Jg'
    args = ['-jcasgeninput', srcFile, '-jcasgenoutput', outputDir]
}
